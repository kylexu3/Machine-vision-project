# -*- coding: utf-8 -*-
"""apple_count_v2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17BZwW9cFYI4l4_qX9Es1h6N_mtqWtYTG
"""

from google.colab import drive
drive.mount('/content/drive')

# import important library in Google Colabs
import numpy as np
import cv2
import math
import matplotlib.pyplot as plt
from google.colab.patches import cv2_imshow
img = cv2.imread('/content/apple/2/images_01453.png') #read image
hsv_img = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)  #convert to hsv

# Range for lower red
lower_red = np.array([0,110,0])
upper_red = np.array([25,255,255])
mask1 = cv2.inRange(hsv_img, lower_red, upper_red)# Range for upper range
lower_red = np.array([170,70,0])
upper_red = np.array([180,255,255])
mask2 = cv2.inRange(hsv_img,lower_red,upper_red)# mask for lower and upper red
mask = mask1 + mask2
# Get image in red pixel only
redImage = cv2.bitwise_and(img.copy(), img.copy(), mask=mask)

cv2_imshow(redImage)

gray = cv2.cvtColor(redImage, cv2.COLOR_BGR2GRAY)
blured = cv2.GaussianBlur(gray,(5,5),0)
ret, thresh = cv2.threshold(blured,0,255,cv2.THRESH_BINARY_INV+cv2.THRESH_OTSU)
cv2_imshow(thresh)

kernel = np.ones((5,5),np.uint8)
closing = cv2.morphologyEx(thresh, cv2.MORPH_CLOSE, kernel)
cv2_imshow(closing)

negative = abs(255-closing)

contours, hierarchy = cv2.findContours(negative, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
hierarchy = hierarchy[0]
max_area = cv2.contourArea(contours[0])
total = 0 # total contour size
for con in contours:
     area = cv2.contourArea(con) # get contour size
     total += area
     if area > max_area:
        max_area = area
diff = 0.1 # smallest contour have to bigger than (diff * max_area)
max_area = int(max_area * diff) # smallest contour have to bigger
average = int(total / (len(contours))) # average size for contour
radius_avg = int(math.sqrt(average / 3.14)) # average radius

average = int(average * diff)

# Remove small object
mask = np.zeros(negative.shape[:2],dtype=np.uint8)
for component in zip(contours, hierarchy):
     currentContour = component[0]
     currentHierarchy = component[1]
     area = cv2.contourArea(currentContour)
     if currentHierarchy[3] < 0 and area > average:
          cv2.drawContours(mask, [currentContour], 0, (255), -1)

cv2_imshow(mask)

res1 = img.copy()
count = 0 #result
for con in contours:
     area = cv2.contourArea(con)
     radian = int(math.sqrt(area / 3.14))
     minRad = int(radian * 0.3)
     maxRad = int(radian * 2)
     mask_temp = np.zeros(mask.shape[:2],dtype=np.uint8)
     cv2.drawContours(mask_temp, [con], 0, (255), -1)
     circles = cv2.HoughCircles(mask_temp,cv2.HOUGH_GRADIENT,1, 1, param1=100,param2=10,minRadius=minRad,maxRadius=maxRad)
     if circles is not None:
          circles = np.uint16(np.around(circles))
          for i in circles[0, :]:
               radius = i[2]
               if radius > radius_avg:
                    count += 1
                    center = (i[0], i[1]) # circle center
                    cv2.putText(res1, str(count), center,      cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2) # Put text at center
                    cv2.circle(res1, center, radius, (0, 0, 255), 3)
print('number of object is', count)
cv2_imshow(res1)